{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar",
  "type": "registry:ui",
  "dependencies": [
    "@phosphor-icons/react",
    "react-day-picker"
  ],
  "registryDependencies": [
    "https://raw.githubusercontent.com/nganweiloong/ui2/refs/heads/main/public/r/button.json"
  ],
  "files": [
    {
      "path": "src/components/calendar.tsx",
      "content": "\"use client\";\n\nimport { CaretDownIcon } from \"@phosphor-icons/react/dist/ssr/CaretDown\";\nimport { CaretLeftIcon } from \"@phosphor-icons/react/dist/ssr/CaretLeft\";\nimport { CaretRightIcon } from \"@phosphor-icons/react/dist/ssr/CaretRight\";\nimport { useEffect, useRef } from \"react\";\nimport {\n  DayButton,\n  DayPicker,\n  DateRange,\n  getDefaultClassNames,\n} from \"react-day-picker\";\nimport { Button, buttonVariants } from \"@/components/button\";\nimport { cn } from \"@/lib/utils\";\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames();\n\n  const ref = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    if (modifiers.focused) ref.current?.focus();\n  }, [modifiers.focused]);\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"md\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 data-[range-end=true]:rounded-lg data-[range-end=true]:rounded-r-lg data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground data-[range-middle=true]:rounded-none data-[range-middle=true]:bg-subtle data-[range-middle=true]:text-foreground data-[range-start=true]:rounded-lg data-[range-start=true]:rounded-l-lg data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground dark:hover:text-primary-foreground [&>span]:text-xs [&>span]:opacity-70\",\n        defaultClassNames.day,\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction Calendar({\n  captionLayout = \"label\",\n  className,\n  classNames,\n  components,\n  formatters,\n  showOutsideDays = true,\n  ...props\n}: React.ComponentProps<typeof DayPicker>) {\n  const defaultClassNames = getDefaultClassNames();\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"group/calendar bg-background p-6 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className,\n      )}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"relative flex flex-col gap-4 sm:flex-row\",\n          defaultClassNames.months,\n        ),\n        month: cn(\n          \"flex w-full flex-col gap-4 not-[.rdp-month:first-of-type]:border-l not-[.rdp-month:first-of-type]:pl-4\",\n          defaultClassNames.month,\n        ),\n        nav: cn(\n          \"absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1\",\n          defaultClassNames.nav,\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: \"ghost\", size: \"sm\" }),\n          \"size-(--cell-size) p-0 select-none aria-disabled:opacity-50\",\n          defaultClassNames.button_previous,\n        ),\n        button_next: cn(\n          buttonVariants({ variant: \"ghost\", size: \"sm\" }),\n          \"size-(--cell-size) p-0 select-none aria-disabled:opacity-50\",\n          defaultClassNames.button_next,\n        ),\n        month_caption: cn(\n          \"flex h-(--cell-size) w-full items-center justify-center px-(--cell-size)\",\n          defaultClassNames.month_caption,\n        ),\n        caption_label: cn(\n          \"text-sm font-bold select-none\",\n          captionLayout !== \"label\" &&\n            \"flex h-8 items-center gap-1 rounded-md pr-1 pl-2 [&>svg]:size-3.5 [&>svg]:text-muted-foreground\",\n          defaultClassNames.caption_label,\n        ),\n        // dropdowns: cn(\n        //   \"flex h-(--cell-size) w-full items-center justify-center gap-1.5 text-sm font-medium\",\n        //   defaultClassNames.dropdowns,\n        // ),\n        // dropdown_root: cn(\n        //   \"relative rounded-md border border-input shadow-xs has-focus:ring has-focus:ring-ring has-focus:ring-offset-1\",\n        //   defaultClassNames.dropdown_root,\n        // ),\n        // dropdown: cn(\"absolute inset-0 opacity-0\", defaultClassNames.dropdown),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\n          \"flex h-(--cell-size) items-center\",\n          defaultClassNames.weekdays,\n        ),\n        weekday: cn(\n          \"flex-1 rounded-lg text-[0.8rem] font-normal text-muted-foreground select-none\",\n          defaultClassNames.weekday,\n        ),\n        week: cn(\"mt-1 flex w-full\", defaultClassNames.week),\n        week_number_header: cn(\n          \"w-(--cell-size) select-none\",\n          defaultClassNames.week_number_header,\n        ),\n        week_number: cn(\n          \"text-[0.8rem] text-muted-foreground select-none\",\n          defaultClassNames.week_number,\n        ),\n        day: cn(\n          \"group/day relative aspect-square h-(--cell-size) w-(--cell-size) p-0 text-center select-none [&:first-child[data-selected=true]_button]:rounded-l-lg [&:last-child[data-selected=true]_button]:rounded-r-lg\",\n          defaultClassNames.day,\n        ),\n        range_start: cn(\n          \"rounded-l-lg bg-subtle\",\n          defaultClassNames.range_start,\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"rounded-r-lg bg-subtle\", defaultClassNames.range_end),\n        today: cn(\n          \"rounded-lg font-bold text-primary data-[selected=true]:rounded-none\",\n          defaultClassNames.today,\n        ),\n        outside: cn(\n          \"text-muted-foreground opacity-50 aria-selected:text-muted-foreground\",\n          defaultClassNames.outside,\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled,\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          );\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <CaretLeftIcon className={cn(\"size-4\", className)} {...props} />\n            );\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <CaretRightIcon className={cn(\"size-4\", className)} {...props} />\n            );\n          }\n\n          return (\n            <CaretDownIcon className={cn(\"size-4\", className)} {...props} />\n          );\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          );\n        },\n        ...components,\n      }}\n      captionLayout={captionLayout}\n      formatters={{\n        formatWeekdayName: date =>\n          [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"][date.getDay()] ?? \"\",\n        formatMonthDropdown: date =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      {...props}\n    />\n  );\n}\n\nexport { Calendar, type DateRange };\n\n// todo: selected & outside days should have lower opacity\n",
      "type": "registry:ui",
      "target": "components/calendar.tsx"
    }
  ]
}